
import Two from 'two.js'

import {distanceToLineSegment} from '../Util/Util'


export default class RailSystem {
    constructor(logo,index, two) {
        this.boundingRect = logo.children[index].getBoundingClientRect()
        //////console.log(childRect)
        this.logo = logo
        this.origin =  new Two.Vector(this.boundingRect.left + this.boundingRect.width / 2, this.boundingRect.top + this.boundingRect.height / 2)
        this.path = logo.children[index].children[0].clone()
        this.two = two
        this.vertices = this.path.vertices
        
        this.points = []
        this.distance = 0
        this.constraintDistance = 0
        this.highlighted = 0
        
        this.setupPoints();

    }

    setID(id){
        this.id = id
    }

    setupPoints() {
        let mult = window.innerWidth/1125<1 ? 0.5 : 1


        this.path.vertices.forEach((anchor, i)=>{
            
            if(i%2===0) {
                var p = new Two.Circle(0, 0, 4);
                p.fill = "green"
          
    
                p.translation.copy(anchor);
                p.translation.addSelf(this.origin);
                this.points.push(p)
                this.two.add(p)
            } else {
                // this.vertices
            }

       
  
        })

    }

    togglePoints(debug) {
        if(debug) {
            this.points.forEach((point)=>{
                point.visible = true
            })
        } else {
            this.points.forEach((point)=>{
                point.visible = false
            })
        }
    }

    resize() {
       


    }

    checkForClosest(anchor, mouse) {

        this.distance = Number.MAX_VALUE
        this.highlighted = 0
        this.selected = null
    

        this.path.vertices.forEach((vertex, i)=>{

         
            // //console.log(i)
            let v = this.path.vertices[i].clone()


            v.addSelf(this.origin)
            let d = distanceToLineSegment(anchor.x, anchor.y, mouse.x, mouse.y, vertex.x, vertex.y)
            if (d<this.distance) {
                this.distance = d;
                this.highlighted = i
                this.selected = v

            } 
                // this.points[i].fill = "green"
            v.subSelf(this.origin)

            
            

 
        })
        // //console.log(this.distance)
        // this.points[this.highlighted].fill = "yellow"
        


        return this.selected.distanceTo(anchor)
    }





}